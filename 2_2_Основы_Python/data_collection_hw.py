# Задача 1: Добавление элемента в список
#
# Описание:
# Напишите программу, которая добавляет новый элемент в конец списка.
#
# Требования:
# - Объявите список, например: numbers = [1, 2, 3].
# - Добавьте новый элемент (например, число 4) в конец списка.
# - Выведите обновлённый список с помощью print().
#
# Пример:
# Исходный список: [1, 2, 3]
#
# После выполнения операции: [1, 2, 3, 4]

numbers = [1, 2 ,3]
numbers.append(4)
print(numbers)

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 2: Удаление элемента из списка
#
# Описание:
# Напишите программу, которая удаляет определённый элемент из списка.
#
# Требования:
# - Объявите список, например: fruits = ["Москва", "Лондон", "Париж"].
# - Удалите элемент "Лондон" из списка.
# - Выведите обновлённый список с помощью print().
#
# Пример:
# Исходный список: ["Москва", "Лондон", "Париж"]
# После удаления: "Лондон": ["Москва", "Париж"]

fruits = ["Москва", "Лондон", "Париж"]
fruits.remove("Лондон")
print(fruits)

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 3: Доступ к элементу по индексу
#
# Описание:
# Напишите программу, которая получает элемент списка по заданному индексу.
#
# Требования:
# - Объявите список, например: cities = ["Москва", "Питер", "Новосибирск", "Екатеринбург"].
# - Получите элемент по индексу 2 (учитывая, что индексация начинается с 0).
# - Выведите полученный элемент с помощью print().
#
# Пример:
# Если cities = ["Москва", "Питер", "Новосибирск", "Екатеринбург"], то элемент с индексом 2 — "Новосибирск", который и должен быть выведен.

cities = ["Москва", "Питер", "Новосибирск", "Екатеринбург"]
print(cities[2])

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 4: Доступ к элементу по срезу списка
#
# Описание:
# Напишите программу, которая извлекает подсписок из заданного списка с использованием среза (slice).
# Требования:
# Объявите список, например: numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9].
# Извлеките срез, например, элементы с индекса 3 до 7 (не включая 7) с помощью numbers[3:7].
# Выведите полученный срез с помощью print().
#
# Пример:
# Если numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], то numbers[3:7] даст [3, 4, 5, 6]

numberz = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
print(numberz[3:7])

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 5: Изменение элемента списка
#
# Описание:
# Напишите программу, которая изменяет значение конкретного элемента в списке.
#
# Требования:
# Объявите список, например: colors = ["red", "green", "blue"].
# Измените элемент с индексом 1 на "yellow".
# Выведите обновлённый список с помощью print().
#
# Пример:
# Исходный список: ["red", "green", "blue"]
# После изменения: ["red", "yellow", "blue"]

colors = ["red", "green", "blue"]
colors[1] = "yellow"
print(colors)

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 6: Узнаем длину списка
#
# Описание: Напишите программу, которая определяет количество элементов в списке.
#
# Требования:
# Объявите список, например: animals = ["cat", "dog", "rabbit", "hamster"].
# Определите длину списка.
# Выведите результат с помощью print().
#
# Пример:
# Если animals = ["cat", "dog", "rabbit", "hamster"], то длина списка равна 4, что и должно быть выведено

animals = ["cat", "dog", "rabbit", "hamster"]
print(len(animals))

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 7: Добавление элемента в словарь
#
# Описание: Напишите программу, которая добавляет новый элемент в словарь.
#
# Требования:
# Объявите словарь, например: student = {"name": "Ivan", "age": 20}.
# Добавьте новую пару "grade": "A" в словарь.
# Выведите обновлённый словарь с помощью print().
#
# Пример:
# Исходный словарь: {"name": "Ivan", "age": 20}
# После добавления: {"name": "Ivan", "age": 20, "grade": "A"}

student = {"name": "Ivan", "age": 30}
student["grade"] = "A"
print(student)

#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 8: Изменение элемента словаря
#
# Описание:
# Напишите программу, которая изменяет значение существующего элемента в словаре.
#
# Требования:
# Объявите словарь, например: student = {"name": "Ivan", "age": 20, "grade": "B"}.
# Измените значение по ключу "grade" с "B" на "A".
# Выведите обновлённый словарь.
#
# Пример:
# До изменения: {"name": "Ivan", "age": 20, "grade": "B"}
# После изменения: {"name": "Ivan", "age": 20, "grade": "A"}

student = {"name": "Ivan", "age": 30, "grade": "B"}
student["grade"] = "А"
print(student)
#----------------------------------------------------------------------------------------------------------------------------------------------------

# Задача 9: Удаление элемента из словаря
#
# Описание: Напишите программу, которая удаляет элемент из словаря по заданному ключу.
#
# Требования:
# Объявите словарь, например: student = {"name": "Ivan", "age": 20, "grade": "A"}.
# Удалите элемент по ключу "age".
# Выведите обновлённый словарь.
#
# Пример:
# Исходный словарь: {"name": "Ivan", "age": 20, "grade": "A"}
# После удаления "age": {"name": "Ivan", "grade": "A"}

student = {"name": "Ivan", "age": 20, "grade": "A"}
del student["age"]
print(student)
#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 10: Доступ к элементу словаря по ключу
#
# Описание: Напишите программу, которая получает значение элемента словаря по заданному ключу.
#
# Требования:
# Объявите словарь, например: student = {"name": "Ivan", "age": 20, "grade": "A"}.
# Получите значение по ключу "name".
# Выведите полученное значение с помощью print().
#
# Пример:
# Если student = {"name": "Ivan", "age": 20, "grade": "A"}, то программа должна вывести: "Имя студента: Ivan"

student = {"name": "Ivan", "age": 20, "grade": "A"}
print(f"Имя студента: {student['name']}")
#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 11: Проверка наличия ключа в словаре
#
# Описание: Напишите программу, которая проверяет, существует ли определённый ключ в словаре.
#
# Требования:
# Объявите словарь, например: student = {"name": "Ivan", "age": 20, "grade": "A"}.
#
# Проверьте, содержится ли ключ "grade" в словаре.
# Если ключ существует, выведите сообщение, что он найден, иначе – что не найден.
#
# Пример:
# Если student = {"name": "Ivan", "age": 20, "grade": "A"}, то программа должна вывести: "Ключ 'grade' найден в словаре."
# Если же ключа "grade" нет, то: "Ключ 'grade' не найден в словаре."

student = {"name": "Ivan", "age": 20, "grade": "A"}
if "grade" in student:
    print(f'Ключ {"grade"} найден в словаре.')
else:
    print(f'{"grade"} не найден в словаре.')
#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 12: Изменение элемента во вложенном словаре
#
# Описание: Напишите программу, которая изменяет значение элемента во вложенном словаре.
#
# Например, представьте, что у нас есть словарь, описывающий студента, в котором адрес хранится как отдельный словарь. Необходимо изменить значение ключа "city" внутри вложенного словаря "address".
#
# Требования:
# Объявите словарь, например: python Copy Edit student = { "name": "Ivan", "address": { "city": "Moscow", "street": "Lenina" } }
# Измените город на "Saint Petersburg" – то есть, обновите значение по ключу "city" во вложенном словаре "address".
# Выведите обновлённый словарь на экран с помощью print().
#
# Пример:
# До изменения: { "name": "Ivan", "address": {"city": "Moscow", "street": "Lenina"} }
# После изменения: { "name": "Ivan", "address": {"city": "Saint Petersburg", "street": "Lenina"} }

student = { "name": "Ivan", "address": { "city": "Moscow", "street": "Lenina" } }
student["address"]["city"] = "Saint Petersburg"
print(student)
#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 13: Изменение элемента в списке, находящемся в словаре
#
# Описание:
# Напишите программу, которая изменяет значение элемента в списке внутри словаря.
#
# Представьте, что в словаре хранятся оценки студента в виде списка. Необходимо заменить первую оценку на новое значение.
#
# Требования:
# Объявите словарь, например: python Copy Edit student = { "name": "Maria", "grades": [75, 82, 90] }
# Измените первую оценку (элемент с индексом 0) на значение 85.
# Выведите обновлённый словарь с помощью print().
#
# Пример:
# До изменения: { "name": "Maria", "grades": [75, 82, 90] }
# После изменения: { "name": "Maria", "grades": [85, 82, 90] }

student = { "name": "Maria", "grades": [75, 82, 90] }
student['grades'][0] = 85
print(student)
#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 14: Изменение элемента в словаре, находящемся внутри списка
#
# Описание: Напишите программу, которая изменяет значение элемента в словарях, вложенных в список.
#
# Представьте, что у вас есть список студентов, где каждый студент представлен в виде словаря с ключами "name" и "age". Необходимо обновить возраст одного из студентов.
#
# Требования:
# Объявите список, например: python Copy Edit students = [ {"name": "Ivan", "age": 20}, {"name": "Petya", "age": 22} ]
# Измените возраст студента с именем "Petya" на 23. Для этого найдите соответствующий словарь и обновите значение ключа "age".
# Выведите обновлённый список на экран с помощью print().
#
# Пример:
# До изменения: { "name": "Ivan", "age": 20}, {"name": "Petya", "age": 22 }
# После изменения: { "name": "Ivan", "age": 20}, {"name": "Petya", "age": 23 }

students = [ {"name": "Ivan", "age": 20}, {"name": "Petya", "age": 22} ]
students[1]["age"] = 23
print(students)
#----------------------------------------------------------------------------------------------------------------------------------------------------
# Задача 15: Проверка наличия элемента и определение длины кортежа
#
# Описание:
# Напишите программу, которая проверяет, содержится ли заданное значение в кортеже, и определяет длину кортежа.
#
# Требования:
# - Объявите кортеж, например: python Copy Edit colors = ("red", "green", "blue"). Проверьте, содержится ли значение "green" в кортеже.
# - Определите количество элементов в кортеже.
# - Выведите результаты проверки и длину кортежа.
#
# Пример:
# Если colors = ("red", "green", "blue"), проверка наличия "green" вернёт True, а длина кортежа – 3.
#
# Вывод: "Наличие 'green': True. Длина кортежа: 3"

colors = ("red", "green", "blue")
is_green_present = "green" in colors
lenght = len(colors)
print(f"Наличие 'green': {is_green_present}. Длина кортежа: {lenght}")
